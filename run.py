import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.utils import executor
from dotenv import load_dotenv

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
def get_secret(name, default=None):
    try:
        secret_path = f"/run/secrets/{name}"
        if os.path.exists(secret_path):
            with open(secret_path, "r") as f:
                return f.read().strip()
        return os.getenv(name, default)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∫—Ä–µ—Ç–∞ {name}: {e}")
        return default

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞
load_dotenv()
BOT_TOKEN = get_secret("BOT_TOKEN")
ADMIN_ID = int(get_secret("ADMIN_ID", 0))

if not BOT_TOKEN or not ADMIN_ID:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω—ã!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞"
main_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üÜï –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞", callback_data="new_complaint")
)

# –í—ã–±–æ—Ä –∫–ª—É–±–∞
club_menu = InlineKeyboardMarkup(row_width=1)
club_menu.add(
    InlineKeyboardButton("Cyberx –ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ", callback_data="club_novokosino"),
    InlineKeyboardButton("Cyberx –ê–ª—Ç—É—Ñ—å–µ–≤–æ", callback_data="club_altufevo")
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    user_data[message.chat.id] = {}  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É:",
        reply_markup=club_menu
    )

@dp.callback_query_handler(lambda c: c.data.startswith("club_"))
async def select_club(callback_query: CallbackQuery):
    club = "–ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ" if callback_query.data == "club_novokosino" else "–ê–ª—Ç—É—Ñ—å–µ–≤–æ"
    user_data[callback_query.message.chat.id]["club"] = club
    await callback_query.message.edit_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–± Cyberx {club}.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É.",
        reply_markup=main_menu
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "new_complaint")
async def new_complaint(callback_query: CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback_query.message.edit_text(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:\n"
        "1Ô∏è‚É£ –ù–æ–º–µ—Ä –ü–ö\n"
        "2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "3Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ç–æ",
        reply_markup=main_menu  # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
    )
    await callback_query.answer()

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: Message):
    if "club" not in user_data.get(message.chat.id, {}):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± —á–µ—Ä–µ–∑ /start.")
        return

    if not message.caption:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ.")
        return

    club = user_data[message.chat.id]["club"]

    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=message.photo[-1].file_id,
        caption=f"üî¥ *–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞*\n\n"
                f"üë®‚Äçüíª –û—Ç: @{message.from_user.username} (ID: {message.from_user.id})\n"
                f"üìç –ö–ª—É–±: Cyberx {club}\n"
                f"üìå {message.caption}",
        parse_mode="Markdown"
    )
    await message.reply("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.", reply_markup=main_menu)

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: Message):
    if "club" not in user_data.get(message.chat.id, {}):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–± —á–µ—Ä–µ–∑ /start.")
        return

    await message.reply("‚ùå –ñ–∞–ª–æ–±–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã.", reply_markup=main_menu)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)