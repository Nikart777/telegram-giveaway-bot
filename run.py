import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ (GitHub Secrets, Docker Secrets, .env)
def get_secret(name, default=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, Docker Secrets –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    try:
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ /run/secrets/
        secret_path = f"/run/secrets/{name}"
        if os.path.exists(secret_path):
            with open(secret_path, "r") as f:
                return f.read().strip()
        # –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (GitHub Secrets, .env)
        return os.getenv(name, default)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∫—Ä–µ—Ç–∞ {name}: {e}")
        return default

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞
BOT_TOKEN = get_secret("BOT_TOKEN")
ADMIN_ID = int(get_secret("ADMIN_ID", 0))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Å–µ–∫—Ä–µ—Ç—ã
if not BOT_TOKEN or not ADMIN_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
START_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∂–∞–ª–æ–±—ã –Ω–∞ –ü–ö.\n\n"
    "üìå –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
    "1Ô∏è‚É£ –ù–æ–º–µ—Ä –ü–ö\n"
    "2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
    "3Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ç–æ –æ—à–∏–±–∫–∏\n\n"
    "‚ö†Ô∏è *–í–∞–∂–Ω–æ! –°–ø–µ—Ä–≤–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–º–æ–≥ –∏–ª–∏ –≤–æ–æ–±—â–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å–º–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ.*"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
confirm_keyboard = InlineKeyboardMarkup(row_width=2)
confirm_keyboard.add(
    InlineKeyboardButton("‚úÖ –î–∞, –∞–¥–º–∏–Ω –Ω–µ –ø–æ–º–æ–≥", callback_data="confirm"),
    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.answer(START_TEXT)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
pending_reports = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: Message):
    if not message.caption:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    pending_reports[message.chat.id] = {
        "photo": message.photo[-1].file_id,
        "text": message.caption,
        "user": message.from_user
    }

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply(
        "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–æ –æ–Ω –Ω–µ —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É.",
        reply_markup=confirm_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data in ["confirm", "cancel"])
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id

    if callback_query.data == "confirm":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∂–∞–ª–æ–±–∞ –≤ —Å–ø–∏—Å–∫–µ
        if user_id in pending_reports:
            report = pending_reports.pop(user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω—É
            await bot.send_photo(
                chat_id=ADMIN_ID,
                photo=report["photo"],
                caption=f"üî¥ *–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞*\n\n"
                        f"üë®‚Äçüíª –û—Ç: @{report['user'].username} (ID: {report['user'].id})\n"
                        f"üìå {report['text']}\n\n"
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª.",
                parse_mode="Markdown"
            )
            await callback_query.message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.")
        else:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –∂–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif callback_query.data == "cancel":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É
        pending_reports.pop(user_id, None)
        await callback_query.message.answer("üö´ –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: Message):
    await message.reply("‚ùå –ñ–∞–ª–æ–±–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
